package helper;

import java.util.*;

/**
 * Created by yongyangyu on 11/13/15.
 */
public class RankData {
    // According to the document of scipy.stats.mstats.rankdata,
    // if some values are tied, their rank is averaged. We follow the same logic here.
    public static double[] rankWithNoMissing(String line) {
        if (line.contains("Sample")) return new double[]{0.0};
        String[] strs = line.split("\t");
        List<Integer> cols = new ArrayList<>();
        double[] data = new double[strs.length-1];
        int nanCnt = 0;
        for (int i = 0; i < data.length; i ++) {
            data[i] = Double.parseDouble(strs[i+1]);
            if (Double.isNaN(data[i])) {
                nanCnt ++;
                cols.add(i);
            }
        }
        double[] cp = new double[data.length];
        System.arraycopy(data, 0, cp, 0, data.length);
        Arrays.sort(cp);
        double [] res = new double[data.length];
        for (int i = 0; i < res.length; i ++) {
            if (Double.isNaN(data[i])) {
                res[i] = data.length - nanCnt + 1;
                nanCnt --;
            }
            else {
                double total = 0.0;
                int curr = binSearch(cp, data[i]);
                total += curr + 1;
                curr ++;
                int cnt = 1;
                while (curr < data.length && Math.abs(data[i] - cp[curr]) < 1e-8) {
                    total += curr + 1;
                    cnt ++;
                    curr ++;
                }
                res[i] = total / cnt;
            }
        }
        return res;
    }

    public static int[] rank(String line, Map<Integer, List<Integer>> pos) {
        if (line.contains("Sample")) return new int[0];
        String[] strs = line.split("\t");
        List<Integer> cols = new ArrayList<>();
        double[] data = new double[strs.length-1];
        int nanCnt = 0;
        int row = Integer.parseInt(strs[0]);
        for (int i = 0; i < data.length; i ++) {
            data[i] = Double.parseDouble(strs[i+1]);
            if (Double.isNaN(data[i])) {
                nanCnt ++;
                cols.add(i);
            }
        }
        double[] cp = new double[data.length];
        System.arraycopy(data, 0, cp, 0, data.length);
        Arrays.sort(cp);
        int [] res = new int[data.length];
        for (int i = 0; i < res.length; i ++) {
            if (Double.isNaN(data[i])) {
                res[i] = data.length - nanCnt + 1;
                nanCnt --;
            }
            else {
                res[i] = binSearch(cp, data[i]) + 1;
            }
        }
        if (!cols.isEmpty()) pos.put(row, cols);
        return res;
    }

    // find the first appearance of the target
    private static int binSearch(double[] data, double target) {
        int lo = -1, hi = data.length;
        //while (Double.isNaN(data[hi])) hi --;
        while (lo + 1 != hi) {
            int mid = lo + (hi-lo) / 2;
            if (data[mid] < target) lo = mid;
            else hi = mid;
        }
        // floating point number equal
        if (hi >= data.length || Math.abs(data[hi] - target) > 1e-8) {
            return -1;
        }
        return hi;
    }

    public static void main(String[] args) {
        String line = "3\t0.008156779\t0.3895286\t0.236756833\t0.29296482\t0.242228513\t0.154683206\t0.316723545\t0.449656927\t0.256430108\t0.135441404\t0.096800971\t0.17834136\t0.256594466\t0.216287177\t0.057556504\t0.642929523\t0.015561436\t0.152089892\t0.1277165\t-0.018058303\t0.185824105\t0.148181584\t0.052504448\t0.187812377\t0.151077136\t0.288576938\t-0.102808448\t0.392329802\t0.190409364\t0.478089635\t0.173159219\t0.19895413\t-0.076843268\t0.344107977\t0.426918665\t0.043018925\t0.1766947\t0.431861578\t0.327957449\t0.285231032\t0.204426559\t0.247568049\t0.266824258\t0.064547277\t0.211430889\t0.534885432\t0.2025734\t0.248679181\t0.097975986\t0.336335116\t0.33515749\t0.133053352\t0.336399213\t0.190413801\t0.198721799\t0.211282502\t0.267079786\t0.192953702\t-0.051615618\t0.225226858\t0.189404781\t0.289530358\t0.537025558\t0.236156923\t0.346602595\t0.147444927\t0.24193181\t0.156034858\t0.054219762\t0.148821039\t0.522945826\t0.649508916\t0.055037369\t0.100173174\t0.189615656\t1.098780537\t-0.134323998\t0.427065391\t0.53834263\t0.568772004\t0.251418945\t0.347011356\t0.263665649\t0.268418931\t0.337307116\t0.262049392\t0.371365555\t0.128918959\t0.227870384\t0.150617339\t0.108264714\t0.40618314\t0.375174204\t0.25336981\t0.073031915\t0.06218113\t0.356412108\t0.204223963\t0.264909067\t0.096370384\t0.151061126\t0.199125235\t0.279576799\t0.388737474\t-0.058592813\t0.5677133\t0.343806598\t0.12251336\t0.160476246\t0.155967558\t0.184009948\t0.552116541\t0.160553215\t0.143345034\t0.127248525\t0.132295949\t0.925309832\t0.57704379\t0.444682329\t0.285779206\t0.142101024\t0.120441731\t1.440520075\t0.294991747\t0.606808764\t0.473764441\t0.491062963\t0.306743952\t0.166935556\t0.480064366\t0.309899947\t-0.002630307\t0.201014808\t0.291903554\t0.24988589\t0.030494912\t0.323481737\t0.388701304\t0.416971381\t0.125075915\t0.236705396\t0.5747128\t0.919056697\t0.093707075\t0.199430427\t0.143345733\t0.094021094\t0.218140964\t0.25658074\t0.224101484\t0.205809629\t0.438595618\t0.49933537\t0.129387119\t0.199351465\t0.117640632\t0.142949412\t0.075370388\t0.151711602\t0.252919665\t0.306658372\t0.155557144\t0.200605259\t0.289438128\t0.208556526\t0.065342461\t0.222914478\t0.350744014\t0.350416535\t0.112906351\t0.095801791\t0.311726739\t0.32500652\t0.169320727\t0.256639254\t0.180192092\t0.171647551\t0.280750951\t0.296745665\t0.222860818\t0.244442523\t0.464224341\t0.158870474\t0.274766507\t0.119801462\t0.337133943\t0.217058547\t0.247492739\t0.368251476\t0.129653458\t0.137204371\t0.227784326\t0.160445735\t0.052837712\t-0.01469149\t0.056424532\t0.113897416\t0.212981907\t0.308369661\t0.196844253\t0.04828143\t0.268771919\t0.202212913\t0.102952254\t0.157292234\t0.0423447\t0.198949087\t0.171876938\t0.702911335\t0.366275216\t-0.078699524\t0.141283889\t0.052464857\t0.482028542\t0.447804826\t0.256163047\t0.19022633\t0.282880654\t0.262667858\t0.336069303\t0.258351478\t0.162889943\t0.286602139\t0.297116639\t0.348923165\t0.004630707\t0.050210453\t0.223681067\t0.267365804\t0.374055727\t0.316343309\t0.190635194\t0.101446055\t0.309012896\t0.31433828\t0.414195541\t-0.112054278\t0.288678785\t0.362694495\t0.213824353\t0.471449993\t0.14263183\t0.296486434\t0.170372461\t0.472221896\t0.12554826\t-0.02120498\t0.208330272\t0.124207624\t0.25405295\t0.294534755\t0.201224099\t0.336772165\t0.079206683\t0.177825917\t-0.012907131\t0.124776027\t0.305091372\t-0.079148727\t0.113287582\t0.10970053\t0.148298157\t0.10257039\t-0.041832913\t-0.154371801\t0.146831803\t0.273036841\t0.312136018\t0.112753119\t-0.010226006\t0.88948555\t0.07129883\t0.250607115\t-0.018908776\t-0.00066619\t0.126611152\t0.031571526\t0.200688775\t0.203882686\t0.181336093\t0.078537896\t0.181777907\t0.240378584\t0.281228521\t0.278360768\t0.117037065\t0.252010304\t0.210138516\t0.390649521\t0.11858203\t0.275948955\t0.34728814\t0.278629256\t0.117996095\t0.264583549\t0.197308154\t0.096480191\t0.261815652\t0.377348252\t0.012331475\t0.141614996\t0.05305647\t0.497934559\t0.359847906\t0.131702459\t0.184385905\t0.371490581\t0.304337505\t0.189058737\t0.236942739\t0.231076475\t0.049399588\t0.478227569\t0.033211159\t0.229777825\t0.427279203\t0.186667871\t0.351752117\t0.327529011\t0.633225975\t0.32185766\t0.243150854\t0.223831218\t0.283682453\t0.382764984\t0.239911535\t0.082896638\t0.496663122\t0.297284811\t0.142152753\t0.390970288\t0.923296943\t0.384334588\t0.281754403\t0.355677024\t0.284040624\t0.039498551\t0.270487194\t0.10963338\t0.296001052\t0.203940831\t0.289694038\t-0.028662021\t0.02838465\t0.452423811\t0.199010506\t-0.000404494\t0.530029759\t0.279932632\t-0.047442572\t0.252516865\t0.405360018\t0.145776636\t0.549270262\t0.259404751\t0.016914132\t0.067159803\t0.191985293\t0.18880756\t0.227450499\t0.248002207\t0.201897206\t0.189632341\t0.165709301\t-0.039554571\t0.140301669\t0.307589488\t0.013431544\t0.35847811\t0.44291734\t0.042092599\t0.235054663\t0.327130129\t0.328688829\t0.099553233\t0.391525879\t0.286036527\t0.018835484\t0.39014036\t0.360061169\t0.410095667\t0.317437386\t0.228127997\t0.137821272\t0.584667048\t0.081423041\t0.547297218\t0.294796933\t0.15478234\t-0.002883357\t0.290159958\t0.112172833\t0.327533628\t-0.017416977\t0.385936216\t0.484607655\t0.218927362\t0.212745676\t0.129296148\t0.177254002\t0.306757259\t0.330378662\t0.137766767\t0.184163423\t0.142907248\t0.180163405\t0.201915078\t0.144678828\t0.039267028\t0.326593506\t0.267391543\t0.513564674\t0.361896264\t0.275839945\t0.325012396\t0.229712298\t0.272396931\t0.318746272\t0.503999281\t0.178548916\t0.099898209\t0.226305169\t0.375943764\t0.670165131\t0.294092461\t0.229072459\t0.113128269\t0.302507934\t0.492303031\t0.223422338\t0.199192831\t0.174451331\t0.323257574\t0.312136965\t0.960537737\t0.126361559\t-0.034919102\t0.421378518\t0.262161651\t0.377588606\t0.277511422\t0.189023701\t0.313834888\t-0.037413161\t0.29374031\t0.235538314\t0.117865738\t0.059836769\t-0.137404229\t0.211771213\t0.151209611\t0.084872689\t0.331334203\t0.119643251\t0.366675046\t0.274239356\t0.259649692\t0.676577514\t0.193687671\t-0.143499047\t0.147681741\t0.112424731";
        double[] res = rankWithNoMissing(line);
        System.out.println(Arrays.toString(res));
    }
}
